diff --git a/acse/Acse.lex b/acse/Acse.lex
index 35f9b73..aefb7f4 100644
--- a/acse/Acse.lex
+++ b/acse/Acse.lex
@@ -90,6 +90,9 @@ ID       [a-zA-Z_][a-zA-Z0-9_]*
 "if"              { return IF; }
 "int"             { yylval.intval = INTEGER_TYPE; return TYPE; }
 "while"           { return WHILE; }
+"forall"          { return FORALL; }
+"to"              { return TO; }
+"downto"          { return DOWNTO; }
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
diff --git a/acse/Acse.y b/acse/Acse.y
index 0636dc6..11ca441 100644
--- a/acse/Acse.y
+++ b/acse/Acse.y
@@ -109,6 +109,7 @@ extern void yyerror(const char*);
    t_list *list;
    t_axe_label *label;
    t_while_statement while_stmt;
+   t_forall_statement forall_stmt;
 } 
 /*=========================================================================
                                TOKENS 
@@ -125,9 +126,11 @@ extern void yyerror(const char*);
 %token RETURN
 %token READ
 %token WRITE
+%token TO DOWNTO
 
 %token <label> DO
 %token <while_stmt> WHILE
+%token <forall_stmt> FORALL
 %token <label> IF
 %token <label> ELSE
 %token <intval> TYPE
@@ -138,6 +141,7 @@ extern void yyerror(const char*);
 %type <decl> declaration
 %type <list> declaration_list
 %type <label> if_stmt
+%type <intval> forall_alternative
 
 /*=========================================================================
                           OPERATOR PRECEDENCES
@@ -254,6 +258,7 @@ control_statement : if_statement         { /* does nothing */ }
             | while_statement            { /* does nothing */ }
             | do_while_statement SEMI    { /* does nothing */ }
             | return_statement SEMI      { /* does nothing */ }
+            | forall_statement           { /* does nothing */ }
 ;
 
 read_write_statement : read_statement  { /* does nothing */ }
@@ -390,6 +395,56 @@ while_statement  : WHILE
                      assignLabel(program, $1.label_end);
                   }
 ;
+
+forall_alternative  : TO
+                    {$$ = 0;}
+                    | DOWNTO
+                    {$$ = 1;}
+;
+
+forall_statement    : FORALL LPAR IDENTIFIER ASSIGN exp
+                    {
+                        int location;
+                        location = get_symbol_location(program, $3, 0);
+                        if ($5.expression_type == IMMEDIATE)
+                            gen_move_immediate(program, location, $5.value);
+                        else
+                            gen_add_instruction(program, location, REG_0, $5.value, CG_DIRECT_ALL);
+
+                        $1.label_condition = assignNewLabel(program);
+                    }
+                    forall_alternative exp RPAR
+                    {
+                        int iter_r = get_symbol_location(program, $3, 0);
+                        int exp_r = getNewRegister(program);
+                        if ($8.expression_type == IMMEDIATE)
+                            gen_move_immediate(program, exp_r, $8.value);
+                        else
+                            gen_add_instruction(program, exp_r, REG_0, $8.value, CG_DIRECT_ALL);
+
+                        if ($7 == 0)
+                            gen_sub_instruction(program, REG_0, exp_r, iter_r, CG_DIRECT_ALL);
+                        else
+                            gen_sub_instruction(program, REG_0, iter_r, exp_r, CG_DIRECT_ALL);
+
+                        /* branch to label_end when < 0 */
+                        $1.label_end = newLabel(program);
+                        gen_bmi_instruction(program, $1.label_end, 0);
+
+                    }
+                    code_block
+                    {
+                        int iter_r = get_symbol_location(program, $3, 0);
+                        if ($7 == 0)
+                            gen_addi_instruction(program, iter_r, iter_r, 1);
+                        else
+                            gen_subi_instruction(program, iter_r, iter_r, 1);
+                        gen_bt_instruction(program, $1.label_condition, 0);
+                        assignLabel(program, $1.label_end);
+
+                        free($3);
+                    }
+;
                   
 do_while_statement  : DO
                      {
diff --git a/acse/axe_struct.h b/acse/axe_struct.h
index 00cb86f..9d29f63 100644
--- a/acse/axe_struct.h
+++ b/acse/axe_struct.h
@@ -110,6 +110,12 @@ typedef struct t_while_statement
                                     * that follows the while construct */
 } t_while_statement;
 
+typedef struct t_forall_statement
+{
+    t_axe_label *label_condition;
+    t_axe_label *label_end;
+} t_forall_statement;
+
 /* create a label */
 extern t_axe_label *alloc_label(int value);
 
diff --git a/program.src b/program.src
index 45d8c41..747f263 100644
--- a/program.src
+++ b/program.src
@@ -1,13 +1,23 @@
-int x, y, z = 42;
-int arr[10];
-int i;
+int i, j, x;
 
 read(x);
-read(y);
-i=0;
-while (i < 10) {
-arr[i] = (y - x) * z;
-i = i + 1;
+forall (i = 0 to 10 + x)
+    forall (j = 10 + x downto 0) {
+        write(i);
+        write(j);
+    }
+
+/*  syntactic sugar for:
+i = 0;
+while (i <= 10 + x) {
+    j = 10 + x;
+    while (j >= 0) {
+        j--;
+
+        write(i);
+        write(j);
+    }
+    i++;
 }
-z = x * y;
-write(z);
\ No newline at end of file
+
+*/
\ No newline at end of file
