diff --git a/acse/Acse.lex b/acse/Acse.lex
index 35f9b73..763e8bb 100644
--- a/acse/Acse.lex
+++ b/acse/Acse.lex
@@ -93,6 +93,7 @@ ID       [a-zA-Z_][a-zA-Z0-9_]*
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
+"exec"            { return EXEC; }
 
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
diff --git a/acse/Acse.y b/acse/Acse.y
index 0636dc6..a38e8ef 100644
--- a/acse/Acse.y
+++ b/acse/Acse.y
@@ -90,6 +90,13 @@ t_reg_allocator *RA;       /* Register allocator. It implements the "Linear
 
 t_io_infos *file_infos;    /* input and output files used by the compiler */
 
+t_list *exec_stack = NULL; /* stack to store exec return statements
+                            *
+                            * exec_stack = addFirst(exec_stack , INTDATA(r_save)); // push
+                            *
+                            * int r_save = LINTDATA(exec_stack);
+                            * exec_stack = removeFirst(exec_stack); // pop */
+
 
 extern int yylex(void);
 extern void yyerror(const char*);
@@ -125,6 +132,7 @@ extern void yyerror(const char*);
 %token RETURN
 %token READ
 %token WRITE
+%token EXEC
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -418,6 +426,23 @@ return_statement : RETURN
                /* insert an HALT instruction */
                gen_halt_instruction(program);
             }
+                | RETURN exp
+            {
+                if(exec_stack == NULL) {
+                    yyerror("parametrized return used outside of exec operator block");
+                    YYERROR;
+                }
+
+                t_exec_operator* info = LDATA(exec_stack);
+
+                // store value of exp
+                if ($2.expression_type == IMMEDIATE)
+                   gen_move_immediate(program, info->result_r, $2.value);
+                else
+                   gen_add_instruction(program, info->result_r, REG_0, $2.value, CG_DIRECT_ALL);
+
+                gen_bt_instruction(program, info->end_label, 0);
+            }
 ;
 
 read_statement : READ LPAR IDENTIFIER RPAR 
@@ -485,6 +510,22 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
                      /* free the memory associated with the IDENTIFIER */
                      free($1);
    }
+   | EXEC {
+                    // authorize special return statement by filling top with exit label
+                    t_exec_operator* info = malloc(sizeof(t_exec_operator));
+                    info->end_label = newLabel(program);
+                    info->result_r = gen_load_immediate(program, 0);
+                    exec_stack = addFirst(exec_stack, info);
+   } LPAR code_block RPAR {
+                    // pop the returned value
+                    t_exec_operator* info = LDATA(exec_stack);
+                    exec_stack = removeFirst(exec_stack);
+
+                    assignLabel(program, info->end_label);
+
+                    $$ = create_expression(info->result_r, REGISTER);
+                    free(info);
+   }
    | NOT_OP exp {
                if ($2.expression_type == IMMEDIATE)
                {
diff --git a/acse/CORRECTION.md b/acse/CORRECTION.md
new file mode 100644
index 0000000..f8a3fb3
--- /dev/null
+++ b/acse/CORRECTION.md
@@ -0,0 +1,3 @@
+- had right idea of using stack but wasn't able to write C code (with `collections.h`) to create stack of custom structs
+- did it myself after learning how to do it
+- small difference from solution broke it (not sure why): getNewRegister in different place
\ No newline at end of file
diff --git a/acse/axe_struct.h b/acse/axe_struct.h
index 00cb86f..97b261d 100644
--- a/acse/axe_struct.h
+++ b/acse/axe_struct.h
@@ -110,6 +110,12 @@ typedef struct t_while_statement
                                     * that follows the while construct */
 } t_while_statement;
 
+typedef struct t_exec_operator
+{
+    int result_r;
+    t_axe_label *end_label;
+} t_exec_operator;
+
 /* create a label */
 extern t_axe_label *alloc_label(int value);
 
diff --git a/program.src b/program.src
index 45d8c41..dae3419 100644
--- a/program.src
+++ b/program.src
@@ -1,13 +1,10 @@
-int x, y, z = 42;
-int arr[10];
-int i;
-
-read(x);
-read(y);
-i=0;
-while (i < 10) {
-arr[i] = (y - x) * z;
-i = i + 1;
-}
-z = x * y;
-write(z);
\ No newline at end of file
+int a, b;
+read(b);
+a = exec({
+    if (b > 10)
+        return b * 2 - 10;
+    if (b > 0)
+        return b;
+    return 0;
+}) * 2;
+write(a); // 10
\ No newline at end of file
