diff --git a/acse/Acse.lex b/acse/Acse.lex
index 35f9b73..fdbd8c7 100644
--- a/acse/Acse.lex
+++ b/acse/Acse.lex
@@ -93,6 +93,7 @@ ID       [a-zA-Z_][a-zA-Z0-9_]*
 "return"          { return RETURN; }
 "read"            { return READ; }
 "write"           { return WRITE; }
+"exists"          { return EXISTS; }
 
 {ID}              { yylval.svalue=strdup(yytext); return IDENTIFIER; }
 {DIGIT}+          { yylval.intval = atoi( yytext );
diff --git a/acse/Acse.y b/acse/Acse.y
index 0636dc6..bb23511 100644
--- a/acse/Acse.y
+++ b/acse/Acse.y
@@ -94,6 +94,11 @@ t_io_infos *file_infos;    /* input and output files used by the compiler */
 extern int yylex(void);
 extern void yyerror(const char*);
 
+char* exists_array = NULL;
+int in_exists = 0;
+int exists_r_res = 0;
+t_axe_label* exists_l_loop = NULL;
+
 %}
 %expect 1
 
@@ -125,6 +130,7 @@ extern void yyerror(const char*);
 %token RETURN
 %token READ
 %token WRITE
+%token EXISTS
 
 %token <label> DO
 %token <while_stmt> WHILE
@@ -458,7 +464,76 @@ write_statement : WRITE LPAR exp RPAR
             }
 ;
 
-exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
+exp: EXISTS IDENTIFIER LPAR
+                 {
+                    /*
+                    note: variable i is not initialized in the example of the exam, in the solution we're ignoring it and
+                    considering as if it was an error and should have been declared.
+                    the sol on webeep does a super complex workaround to consider it as right, but you can ignore it
+
+                    to prevent nested exists we could change the grammar productions to prevent it, but easier way is
+                    global variable that we set when inside exists that we check and throw error in case of nesting
+                    to get info about array contained in exp we change also that rule to store info in global variable
+                    this works because text says that only one array id appears in the expression
+                    ON THURSDAY THIS TRICK WON'T BE REQUIRED
+                    // writes C code equivalent
+                    int i;
+                    int a[5];
+                    exists i (a[i]>5);
+                    i = 0;
+                    res = 0;
+                    do {
+                        tmp = a[i] > 5;
+                        res = res || tmp;
+                        i++;
+                    } while (i<5);
+                    ADDI Ri R0 #0
+                    ADDI Rres R0 #0
+                 loop:
+                    (Rtemp = ... executed during exp we don't care)
+                    ORL Rres Rres Rtmp
+                    ADDI Ri Ri #1
+                    SUBI R0 Ri #5
+                    BLT loop
+                    */
+
+                    if(in_exists != 0){
+                        yyerror("nested exists not allowed");
+                        YYERROR;
+                    }
+
+                    in_exists = 1;
+                    int r_i = get_symbol_location(program, $2, 0);
+                    gen_addi_instruction(program, r_i, REG_0, 0);
+                    exists_r_res = getNewRegister(program);
+                    gen_addi_instruction(program, exists_r_res, REG_0, 0);
+
+                    exists_l_loop = assignNewLabel(program);
+                 }
+    exp RPAR
+                 {
+                    if($5.expression_type == REGISTER) {
+                        gen_orl_instruction(program, exists_r_res, exists_r_res, $5.value, CG_DIRECT_ALL);
+                    } else {
+                        gen_orli_instruction(program, exists_r_res, exists_r_res, $5.value);
+                    }
+                    int r_i = get_symbol_location(program, $2, 0);
+                    gen_addi_instruction(program, r_i, r_i, 1);
+
+                    if (exists_array == NULL) { // it means there were no arrays in the expression
+                        yyerror("no array in exists expression!");
+                        YYERROR;
+                    }
+                    t_axe_variable* v_array = getVariable(program, exists_array);
+                    gen_subi_instruction(program, REG_0, r_i, v_array->arraySize);
+                    gen_blt_instruction(program, exists_l_loop, 0);
+
+                    exists_array = NULL;
+                    in_exists = 0;
+
+                    $$ = create_expression(exists_r_res, REGISTER);
+                 }
+   | NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
    | IDENTIFIER  {
                      int location;
    
@@ -482,8 +557,9 @@ exp: NUMBER      { $$ = create_expression ($1, IMMEDIATE); }
                      /* create a new expression */
                      $$ = create_expression (reg, REGISTER);
 
-                     /* free the memory associated with the IDENTIFIER */
-                     free($1);
+                     // instead of just freeing the identifier, we'll store it into the global variable
+                     free(exists_array); // we also free the global variable (doesn't matter if null, free doesn't crash)
+                     exists_array = $1;
    }
    | NOT_OP exp {
                if ($2.expression_type == IMMEDIATE)
diff --git a/acse/CORRECTION.md b/acse/CORRECTION.md
new file mode 100644
index 0000000..882c76e
--- /dev/null
+++ b/acse/CORRECTION.md
@@ -0,0 +1,4 @@
+- weird: also had to modify existing semantic action (the one of exp) to store the identifier in a global variable
+- very unclear exam text
+- similarity with my exam should be that there is a construct requiring to implement a for loop with 2 semantic action blocks that need to communicate (maybe through global variables?)
+- other info about my exam: ask giulia/francesco
\ No newline at end of file
